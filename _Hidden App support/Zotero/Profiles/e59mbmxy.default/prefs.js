// Mozilla User Preferences

// DO NOT EDIT THIS FILE.
//
// If you make changes to this file while the application is running,
// the changes will be overwritten when the application exits.
//
// To change a preference value, you can either:
// - modify it via the UI (e.g. via about:config in the browser); or
// - set it within a user.js file in your profile.

user_pref("app.update.download.attempts", 0);
user_pref("app.update.elevate.attempts", 0);
user_pref("app.update.lastUpdateTime.addon-background-update-timer", 1697585532);
user_pref("app.update.lastUpdateTime.background-update-timer", 1697570276);
user_pref("app.update.lastUpdateTime.blocklist-background-update-timer", 1697622388);
user_pref("app.update.lastUpdateTime.search-engine-update-timer", 1697615570);
user_pref("app.update.lastUpdateTime.xpi-signature-verification", 1697570396);
user_pref("app.update.postupdate", true);
user_pref("browser.cache.disk.capacity", 358400);
user_pref("browser.cache.disk.filesystem_reported", 1);
user_pref("browser.dom.window.dump.enabled", false);
user_pref("browser.preferences.animateFadeIn", false);
user_pref("extensions.blocklist.pingCountVersion", -1);
user_pref("extensions.databaseSchema", 27);
user_pref("extensions.lastAppBuildId", "20231011091640");
user_pref("extensions.lastAppVersion", "6.0.28");
user_pref("extensions.lastPlatformVersion", "60.9.0");
user_pref("extensions.mdnotes.directory", "/Users/eliastorjani/Library/Mobile Documents/iCloud~md~obsidian/Documents/DM/Other");
user_pref("extensions.mdnotes.file_conf", "single");
user_pref("extensions.pendingOperations", false);
user_pref("extensions.systemAddonSet", "{\"schema\":1,\"addons\":{}}");
user_pref("extensions.ui.dictionary.hidden", true);
user_pref("extensions.ui.locale.hidden", true);
user_pref("extensions.zotero.Knowledge4Zotero.citeFormat", "{\"mode\":\"bibliography\",\"contentType\":\"\",\"id\":\"http://www.zotero.org/styles/apa\",\"locale\":\"\"}");
user_pref("extensions.zotero.Knowledge4Zotero.embedLink", false);
user_pref("extensions.zotero.Knowledge4Zotero.exportAutoSync", true);
user_pref("extensions.zotero.Knowledge4Zotero.exportSubMD", true);
user_pref("extensions.zotero.Knowledge4Zotero.mainKnowledgeID", 1955);
user_pref("extensions.zotero.Knowledge4Zotero.recentMainNoteIds", "1946,1955,1866,1055,1054,1019,1022,1327,1016,1140");
user_pref("extensions.zotero.Knowledge4Zotero.syncDetail-1918", "{\"path\":\"/Users/eliastorjani/Library/Mobile Documents/iCloud~md~obsidian/Documents/DM/4S/_Meta/References - Zotero/KLC\",\"filename\":\"KLC-3.0-RG7CUPE6.md\",\"md5\":\"5ece8bcf8ec3a31ba3d1238b624b319c\",\"noteMd5\":\"717e897966e20e8ca1e1db23e075fa42\",\"lastsync\":1684252865310,\"itemID\":1918}");
user_pref("extensions.zotero.Knowledge4Zotero.syncPeriod", 10000);
user_pref("extensions.zotero.Knowledge4Zotero.template.", "");
user_pref("extensions.zotero.Knowledge4Zotero.template.[ExportMDFileHeaderV2]", "${await new Promise(async (r) => {\n    let header = {};\n    header.tags = noteItem.getTags().map((_t) => _t.tag);\n    header.parent = noteItem.parentItem\n      ? noteItem.parentItem.getField(\"title\")\n      : \"\";\n    header.collections = (\n      await Zotero.Collections.getCollectionsContainingItems([\n        (noteItem.parentItem || noteItem).id,\n      ])\n    ).map((c) => c.name);\n    r(JSON.stringify(header));\n  })}");
user_pref("extensions.zotero.Knowledge4Zotero.template.[ExportMDFileHeader]", "${await new Promise(async (r) => {\n  let header = {};\n  header.tags = noteItem.getTags().map((_t) => _t.tag);\n  header.parent = noteItem.parentItem? noteItem.parentItem.getField(\"title\") : \"\";\n  header.collections = (\n    await Zotero.Collections.getCollectionsContainingItems([\n      (noteItem.parentItem || noteItem).id,\n    ])\n  ).map((c) => c.name);\n  r(JSON.stringify(header));\n})}\n");
user_pref("extensions.zotero.Knowledge4Zotero.template.[ExportMDFileNameV2]", "${(noteItem.getNoteTitle ? noteItem.getNoteTitle().replace(/[/\\\\?%*:|\"<> ]/g, \"-\") + \"-\" : \"\")}${noteItem.key}.md");
user_pref("extensions.zotero.Knowledge4Zotero.template.[ExportMDFileName]", "${(noteItem.getNoteTitle ? noteItem.getNoteTitle().replace(/[/\\\\?%*:|\"<> ]/g, \"-\") + \"-\" : \"\")}${noteItem.key}.md");
user_pref("extensions.zotero.Knowledge4Zotero.template.[Item] collect annotations by color", "${await new Promise(async (r) => {\n  async function getAnnotation(item) {\n    try {\n      if (!item || !item.isAnnotation()) {\n        return null;\n      }\n      let json = await Zotero.Annotations.toJSON(item);\n      json.id = item.key;\n      delete json.key;\n      for (let key in json) {\n        json[key] = json[key] || \"\";\n      }\n      json.tags = json.tags || [];\n      return json;\n    } catch (e) {\n      Zotero.logError(e);\n      return null;\n    }\n  }\n\n  async function getAnnotationsByColor(_item, color) {\n    let annots = _item\n      .getAnnotations()\n    annots = color ? \n      annots.filter((_annot) => _annot.annotationColor === color) :\n      annots;\n    let annotations = [];\n    for (let annot of annots) {\n      const annotJson = await getAnnotation(annot);\n      annotJson.attachmentItemID = _item.id;\n      annotations.push(annotJson);\n    }\n\n    const editor =\n      await Zotero.Knowledge4Zotero.knowledge.getWorkspaceEditorInstance();\n    await editor.importImages(annotations);\n    return Zotero.EditorInstanceUtilities.serializeAnnotations(annotations);\n  }\n\n  const attachments = Zotero.Items.get(topItem.getAttachments()).filter((i) =>\n    i.isPDFAttachment()\n  );\n  let res = \"\";\n  for (let attachment of attachments) {\n    res += `<h2>${attachment.getFilename()}</h2>\n${(await getAnnotationsByColor(attachment)).html}`;\n  }\n  r(res);\n})}");
user_pref("extensions.zotero.Knowledge4Zotero.template.[Item] collect annotations by tag", "// @beforeloop-begin\n${(()=>{\nsharedObj.tagRaw = prompt(\"Please input tags. Split with '',:\", \"\");\nreturn \"\";\n})()}\n// @beforeloop-end\n// @default-begin\n${await new Promise(async (r) => {\n  async function getAnnotation(item) {\n    try {\n      if (!item || !item.isAnnotation()) {\n        return null;\n      }\n      let json = await Zotero.Annotations.toJSON(item);\n      json.id = item.key;\n      delete json.key;\n      for (let key in json) {\n        json[key] = json[key] || \"\";\n      }\n      json.tags = json.tags || [];\n      return json;\n    } catch (e) {\n      Zotero.logError(e);\n      return null;\n    }\n  }\n\n  async function getAnnotationsByTag(_item, tag) {\n    let annots = _item.getAnnotations();\n    annots = tag.length? \n      annots.filter((_annot) => _annot.getTags().map(_t=>_t.tag).includes(tag)) :\n      annots;\n    let annotations = [];\n    for (let annot of annots) {\n      const annotJson = await getAnnotation(annot);\n      annotJson.attachmentItemID = _item.id;\n      annotations.push(annotJson);\n    }\n    if (!editor) {\n      alert(\"No active note editor detected. Please open workspace.\");\n      return r(\"\");\n    }\n    await editor.importImages(annotations);\n      return Zotero.EditorInstanceUtilities.serializeAnnotations(annotations);\n    }\n  const attachments = Zotero.Items.get(topItem.getAttachments()).filter((i) =>\n    i.isPDFAttachment()\n  );\n  let res = \"\";\n  if(!sharedObj.tagRaw){\n    return;\n  }\n  res += `<h1>${topItem.getField(\"title\")}</h1>`;\n  for (let attachment of attachments) {\n    res += `<h2>${attachment.getFilename()}</h2>`;\n    for(tag of sharedObj.tagRaw.split(\",\").filter(t=>t.length)){\n      res += `<h3>Tag: ${tag}</h3>`;\n      const tags = (await getAnnotationsByTag(attachment, tag)).html\n      res += tags ? tags : \"<p>No result</p>\";\n  }\n  }\n  r(res);\n})}\n// @default-end");
user_pref("extensions.zotero.Knowledge4Zotero.template.[Item] item-notes with metadata", "<h1>${topItem.getField(\"title\")}</h1>\n<h2 style=\"color:red; background-color: #efe3da;\">💡 Meta Data</h2>\n<table>\n    <tr>\n        <th style=\"background-color:#dbeedd;\">\n            <p style=\"text-align: right\">Title </p>\n        </th>\n        <td style=\"background-color:#dbeedd;\">\n            ${topItem.getField('title')}\n        </td>\n    </tr>\n    <tr>\n        <th style=\"background-color:#f3faf4;\">\n            <p style=\"text-align: right\">Journal </p>\n        </th>\n        <td style=\"background-color:#f3faf4;\">\n            ${topItem.getField('publicationTitle')}\n        </td>\n    </tr>\n    <tr>\n        <th style=\"background-color:#dbeedd;\">\n            <p style=\"text-align: right\">1<sup>st</sup> Author </p>\n        </th>\n        <td style=\"background-color:#dbeedd;\">\n            ${topItem.getField('firstCreator')}\n        </td>\n    </tr>\n    <tr>\n        <th style=\"background-color:#f3faf4;\">\n            <p style=\"text-align: right\">Authors </p>\n        </th>\n        <td style=\"background-color:#f3faf4;\">\n            ${topItem.getCreators().map((v)=>v.firstName+\" \"+v.lastName).join(\"; \")}\n        </td>\n    </tr>\n    <tr>\n        <th style=\"background-color:#dbeedd;\">\n            <p style=\"text-align: right\">Pub. date </p>\n        </th>\n        <td style=\"background-color:#dbeedd;\">\n            ${topItem.getField('date')}\n        </td>\n    </tr>\n    <tr>\n        <th style=\"background-color:#f3faf4;\">\n            <p style=\"text-align: right\">DOI </p>\n        </th>\n        <td style=\"background-color:#f3faf4;\">\n            <a href=\"https://doi.org/${topItem.getField('DOI')}\">${topItem.getField('DOI')}</a>\n        </td>\n    </tr>\n    <tr>\n        <th style=\"background-color:#dbeedd;\">\n            <p style=\"text-align: right\">Archive </p>\n        </th>\n        <td style=\"background-color:#dbeedd;\">\n            ${topItem.getField('archive')}\n        </td>\n    </tr>\n    <tr>\n        <th style=\"background-color:#f3faf4;\">\n            <p style=\"text-align: right\">Archive Location </p>\n        </th>\n        <td style=\"background-color:#f3faf4;\">\n            ${topItem.getField('archiveLocation')}\n        </td>\n    </tr>\n    <tr>\n        <th style=\"background-color:#dbeedd;\">\n            <p style=\"text-align: right\">Call No. </p>\n        </th>\n        <td style=\"background-color:#dbeedd;\">\n            ${topItem.getField('callNumber')}\n        </td>\n    </tr>\n</table>\n${itemNotes.map((noteItem)=>{\nconst noteLine = `<h2  style=\"color:red; background-color: #efe3da;\">📜 Note:  <a href=\"${Zotero.BetterNotes.knowledge.getNoteLink(noteItem)}\" rel=\"noopener noreferrer nofollow\">${noteItem.key}</a></h2>\n<blockquote>\n    ${noteItem.getNote()}\n    <p style=\"background-color: pink;\"><strong>Merge Date: </strong> ${new Date().toISOString().substr(0,10)+\" \"+ new Date().toTimeString()}</p>\n</blockquote>\n<p style=\"color:red; background-color: #efe3da;\"><strong>📝 Comments</strong></p>\n<blockquote>\n    <p>Make your comments</p>\n    <p></p>\n</blockquote>`;\ncopyNoteImage(noteItem);\nreturn noteLine;\n}).join(\"\\n\")}\n");
user_pref("extensions.zotero.Knowledge4Zotero.template.[Item] note links", "<p><a href=\"${Zotero.BetterNotes.knowledge.getNoteLink(topItem)}\">${topItem.getNoteTitle().trim() ? topItem.getNoteTitle().trim() : Zotero.BetterNotes.knowledge.getNoteLink(topItem)}</a></p>");
user_pref("extensions.zotero.Knowledge4Zotero.template.[QuickBackLinkV2]", "<p>\n    Referred in\n    <a href=\"${link}\">\n      ${linkText}\n    </a>\n  </p>");
user_pref("extensions.zotero.Knowledge4Zotero.template.[QuickBackLink]", "<p>Referred in <a href=\"${Zotero.BetterNotes.knowledge.getNoteLink(noteItem)}?ignore=1&line=${lineIndex}\" rel=\"noopener noreferrer nofollow\">${noteItem.getNoteTitle().trim() ? noteItem.getNoteTitle().trim() : \"Main Note\"}${sectionName?`/${sectionName}`:\"\"}</a></p>");
user_pref("extensions.zotero.Knowledge4Zotero.template.[QuickImportV2]", "<blockquote>\n  ${await new Promise(async (r) => {\n    r(await Zotero.BetterNotes.api.convert.link2html(link, {noteItem, dryRun: _env.dryRun}));\n  })}\n  </blockquote>");
user_pref("extensions.zotero.Knowledge4Zotero.template.[QuickImport]", "<blockquote>\n<p><strong>Linked Note:</strong></p>\n${subNoteLines.join(\"\")}\n</blockquote>");
user_pref("extensions.zotero.Knowledge4Zotero.template.[QuickInsertV2]", "<p>\n    <a href=\"${link}\">\n      ${linkText}\n    </a>\n  </p>");
user_pref("extensions.zotero.Knowledge4Zotero.template.[QuickInsert]", "<p><a href=\"${link}\" rel=\"noopener noreferrer nofollow\">${subNoteItem.getNoteTitle().trim() ? subNoteItem.getNoteTitle().trim() : link}</a></p>");
user_pref("extensions.zotero.Knowledge4Zotero.template.[QuickNoteV4]", "${await new Promise(async (r) => {\nlet res = \"\"\nif(annotationItem.annotationComment){\nres += await Zotero.BetterNotes.NoteParse.parseMDToHTML(annotationItem.annotationComment);\n}\nres += await Zotero.BetterNotes.NoteParse.parseAnnotationHTML(noteItem, [annotationItem], true);\nr(res);})}");
user_pref("extensions.zotero.Knowledge4Zotero.template.[QuickNoteV5]", "${await new Promise(async (r) => {\n    let res = \"\";\n    if (annotationItem.annotationComment) {\n      res += await Zotero.BetterNotes.api.convert.md2html(\n        annotationItem.annotationComment\n      );\n    }\n    res += await Zotero.BetterNotes.api.convert.annotations2html([annotationItem], {noteItem, ignoreComment: true});\n    r(res);\n  })}");
user_pref("extensions.zotero.Knowledge4Zotero.template.[Text] table", "${(()=>{\nconst size = prompt(\"Table Size(row*column):\", \"4*3\");\nif(!size){\nreturn \"\";\n}\nconst row = Number(size.split(\"*\")[0]);\nconst col = Number(size.split(\"*\")[1]);\nif(!row || !col){\nreturn \"\";\n}\nconst makeCell = ()=>\"<td>\\n</td>\";\nconst makeRow = ()=>`<tr>${[...Array(col).keys()].map(makeCell).join(\"\\n\")}</tr>`;\nreturn `<table>\n${[...Array(row).keys()].map(makeRow).join(\"\\n\")}\n</table>`;\n})()}");
user_pref("extensions.zotero.Knowledge4Zotero.templateKeys", "[{\"name\":\"[QuickBackLink]\",\"disabled\":false},{\"name\":\"[QuickInsert]\",\"disabled\":false},{\"name\":\"[QuickImport]\",\"disabled\":false},{\"name\":\"[QuickNoteV4]\",\"disabled\":false},{\"name\":\"[ExportMDFileName]\",\"disabled\":false},{\"name\":\"[ExportMDFileHeader]\",\"disabled\":false},{\"name\":\"[Item] item-notes with metadata\",\"disabled\":false},{\"name\":\"[Item] collect annotations by color\",\"disabled\":false},{\"name\":\"[Item] collect annotations by tag\",\"disabled\":false},{\"name\":\"[Item] note links\",\"disabled\":false},{\"name\":\"[Text] table\",\"disabled\":false},{\"name\":\"[QuickInsertV2]\"},{\"name\":\"[QuickBackLinkV2]\"},{\"name\":\"[QuickImportV2]\"},{\"name\":\"[QuickNoteV5]\"},{\"name\":\"[ExportMDFileNameV2]\"},{\"name\":\"[ExportMDFileHeaderV2]\"}]");
user_pref("extensions.zotero.Knowledge4Zotero.workspace.tab.active", false);
user_pref("extensions.zotero.autoRenameFiles", false);
user_pref("extensions.zotero.cite.automaticJournalAbbreviations", false);
user_pref("extensions.zotero.dataDir", "/Users/eliastorjani/Zotero");
user_pref("extensions.zotero.export.bibliographySettings", "{\"mode\":\"bibliography\",\"method\":\"copy-to-clipboard\"}");
user_pref("extensions.zotero.export.lastLocale", "en-US");
user_pref("extensions.zotero.export.lastStyle", "http://www.zotero.org/styles/apa");
user_pref("extensions.zotero.export.lastTranslator", "9cb70025-a888-4a29-a210-93ec52da40d4");
user_pref("extensions.zotero.export.noteTranslatorSettings", "{\"includeAppLinks\":true}");
user_pref("extensions.zotero.export.quickCopy.dragLimit", 20);
user_pref("extensions.zotero.export.quickCopy.setting", "bibliography=http://www.zotero.org/styles/apa");
user_pref("extensions.zotero.export.translatorSettings", "{\"exportCharset\":\"UTF-8\",\"exportNotes\":true,\"exportFileData\":true,\"useJournalAbbreviation\":false,\"includeAnnotations\":true}");
user_pref("extensions.zotero.firstRun.skipFirefoxProfileAccessCheck", true);
user_pref("extensions.zotero.firstRun2", false);
user_pref("extensions.zotero.firstRunGuidanceShown.quickFormatMac", true);
user_pref("extensions.zotero.fontSize", "1.5");
user_pref("extensions.zotero.ignoreLegacyDataDir.auto", true);
user_pref("extensions.zotero.import.createNewCollection.fromFileOpenHandler", false);
user_pref("extensions.zotero.lastAbstractExpand", false);
user_pref("extensions.zotero.lastRenameAssociatedFile", true);
user_pref("extensions.zotero.lastViewedFolder", "C78");
user_pref("extensions.zotero.newItemTypeMRU", "interview,document,videoRecording,film,email");
user_pref("extensions.zotero.pane.persist", "{\"zotero-collections-pane\":{\"width\":\"231\"},\"zotero-tags-splitter\":{\"state\":\"\"},\"zotero-tag-selector-container\":{\"height\":\"153\"},\"zotero-collections-splitter\":{},\"zotero-layout-switcher\":{\"orient\":\"horizontal\"},\"zotero-items-pane\":{\"width\":\"434\",\"height\":\"264\"},\"zotero-items-tree\":{\"current-view-group\":\"default\"},\"zotero-items-column-title\":{\"ordinal\":0.25,\"hidden\":false},\"zotero-items-column-firstCreator\":{\"ordinal\":0.75,\"hidden\":false},\"zotero-items-column-itemType\":{\"width\":40,\"ordinal\":1.25,\"hidden\":true},\"zotero-items-column-date\":{\"ordinal\":1.75,\"hidden\":true},\"zotero-items-column-year\":{\"ordinal\":2.25,\"hidden\":true},\"zotero-items-column-publisher\":{\"ordinal\":2.75,\"hidden\":true},\"zotero-items-column-publicationTitle\":{\"ordinal\":3.25,\"hidden\":true},\"zotero-items-column-journalAbbreviation\":{\"ordinal\":3.75,\"hidden\":true},\"zotero-items-column-language\":{\"ordinal\":4.25,\"hidden\":true},\"zotero-items-column-accessDate\":{\"ordinal\":4.75,\"hidden\":true},\"zotero-items-column-libraryCatalog\":{\"ordinal\":5.25,\"hidden\":true},\"zotero-items-column-callNumber\":{\"ordinal\":5.75,\"hidden\":true},\"zotero-items-column-rights\":{\"ordinal\":6.25,\"hidden\":true},\"zotero-items-column-dateAdded\":{\"ordinal\":6.75,\"hidden\":true},\"zotero-items-column-dateModified\":{\"ordinal\":7.25,\"hidden\":true},\"zotero-items-column-archive\":{\"ordinal\":7.75,\"hidden\":true},\"zotero-items-column-archiveLocation\":{\"ordinal\":8.25,\"hidden\":true},\"zotero-items-column-place\":{\"ordinal\":8.75,\"hidden\":true},\"zotero-items-column-volume\":{\"ordinal\":9.25,\"hidden\":true},\"zotero-items-column-edition\":{\"ordinal\":9.75,\"hidden\":true},\"zotero-items-column-pages\":{\"ordinal\":10.25,\"hidden\":true},\"zotero-items-column-issue\":{\"ordinal\":10.75,\"hidden\":true},\"zotero-items-column-series\":{\"ordinal\":11.25,\"hidden\":true},\"zotero-items-column-seriesTitle\":{\"ordinal\":11.75,\"hidden\":true},\"zotero-items-column-court\":{\"ordinal\":12.25,\"hidden\":true},\"zotero-items-column-medium\":{\"ordinal\":12.75,\"hidden\":true},\"zotero-items-column-genre\":{\"ordinal\":13.25,\"hidden\":true},\"zotero-items-column-system\":{\"ordinal\":13.75,\"hidden\":true},\"zotero-items-column-extra\":{\"ordinal\":14.25,\"hidden\":true},\"zotero-items-column-hasAttachment\":{\"ordinal\":14.75,\"hidden\":false},\"zotero-items-column-numNotes\":{\"ordinal\":15.25,\"hidden\":true},\"zotero-items-splitter\":{\"state\":\"\",\"orient\":\"horizontal\"},\"zotero-item-pane\":{\"width\":\"363\",\"height\":\"697\"},\"zotero-reader-sidebar-pane\":{\"collapsed\":\"true\",\"width\":\"360\"},\"zotero-context-splitter\":{\"state\":\"collapsed\"},\"zotero-context-pane\":{\"width\":\"360\"},\"zotero-context-splitter-stacked\":{\"state\":\"open\"},\"zotero-context-pane-inner\":{}}");
user_pref("extensions.zotero.pdfpreview.enableTab", false);
user_pref("extensions.zotero.pdfpreview.previewScale", "0.9");
user_pref("extensions.zotero.pdfpreview.splitHeight", "373");
user_pref("extensions.zotero.prefVersion", 6);
user_pref("extensions.zotero.purge.tags", true);
user_pref("extensions.zotero.recentSaveTargets", "[{\"id\":\"C41\",\"sessionID\":\"gFXow9Nc\"},{\"id\":\"C11\",\"sessionID\":\"jfiznFMr\"},{\"id\":\"C43\",\"sessionID\":\"cEggr1bG\"},{\"id\":\"C32\",\"sessionID\":\"C3HoXnQb\"},{\"id\":\"C35\",\"sessionID\":\"OYHnkrIs\"},{\"id\":\"C52\",\"sessionID\":\"hfTWp6jr\"},{\"id\":\"C51\",\"sessionID\":\"WEs72vLF\"}]");
user_pref("extensions.zotero.recursiveCollections", true);
user_pref("extensions.zotero.search.quicksearch-mode", "titleCreatorYear");
user_pref("extensions.zotero.secondarySort.firstCreator", "title");
user_pref("extensions.zotero.secondarySort.title", "date");
user_pref("extensions.zotero.sourceList.persist", "{\"P1\":false,\"L2\":false,\"C29\":true,\"L1\":true,\"C71\":true,\"C70\":true,\"C69\":true,\"C74\":true,\"C82\":true,\"C7\":true,\"C43\":true,\"C66\":true}");
user_pref("extensions.zotero.sync.librariesToSkip", "[]");
user_pref("extensions.zotero.sync.server.username", "elto21ab@student.cbs.dk");
user_pref("extensions.zotero.translators.better-bibtex.autoExportDelay", 2);
user_pref("extensions.zotero.translators.better-bibtex.citekeyFormatEditing", "auth.lower + shorttitle(3,3) + year");
user_pref("extensions.zotero.translators.better-bibtex.platform", "mac");
user_pref("extensions.zotero.trashAutoEmptyDays", 2);
user_pref("extensions.zotero.useDataDir", true);
user_pref("extensions.zoteroMacWordIntegration.installed", true);
user_pref("extensions.zoteroMacWordIntegration.version", "6.0.9.SA.6.0.28");
user_pref("extensions.zoteroOpenOfficeIntegration.skipInstallation", true);
user_pref("extensions.zoteropreview.citationstyle", "http://www.zotero.org/styles/apa");
user_pref("extensions.zotfile.source_dir_ff", false);
user_pref("extensions.zotfile.version", "5.1.2");
user_pref("font.internaluseonly.changed", true);
user_pref("gecko.handlerService.migrated", true);
user_pref("idle.lastDailyNotification", 1697566692);
user_pref("intl.accept_languages", "en-US, en");
user_pref("media.gmp.storage.version.observed", 1);
user_pref("network.cookie.prefsMigrated", true);
user_pref("network.predictor.cleaned-up", true);
user_pref("places.database.lastMaintenance", 1697097218);
user_pref("places.history.expiration.transient_current_max_pages", 104858);
user_pref("signon.importedFromSqlite", true);
user_pref("storage.vacuum.last.index", 1);
user_pref("storage.vacuum.last.places.sqlite", 1697097218);
