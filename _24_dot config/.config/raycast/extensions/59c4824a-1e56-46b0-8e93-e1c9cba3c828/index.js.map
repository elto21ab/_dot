{
  "version": 3,
  "sources": ["../src/index.tsx", "../src/utils/keepassLoader.ts"],
  "sourcesContent": ["import { Action, ActionPanel, closeMainWindow, Icon, List, showToast, Toast, open } from \"@raycast/api\";\nimport {\n  loadEntriesCache,\n  refreshEntriesCache,\n  pastePassword,\n  pasteUsername,\n  pasteTOTP,\n  copyPassword,\n  copyUsername,\n  copyTOTP,\n  getURL,\n} from \"./utils/keepassLoader\";\nimport { useState, useEffect } from \"react\";\n\nconst errorHandler = (e: { message: string }) => {\n  console.error(e);\n  let invalidPreference = \"\";\n  if (e.message.includes(\"Invalid credentials were provided\")) {\n    invalidPreference = \"Password\";\n  } else if (e.message.includes(\"keepassxc-cli: No such file or directory\") || e.message.includes(\"ENOENT\")) {\n    invalidPreference = \"Path of KeepassXC.app\";\n  } else if (\n    e.message.includes(\"Failed to open database file\") ||\n    e.message.includes(\"Error while reading the database: Not a KeePass database\")\n  ) {\n    invalidPreference = \"Keepass Database File\";\n  }\n  let toastTitle = \"Error\";\n  let toastMessage = e.message.trim();\n  if (invalidPreference !== \"\") {\n    toastTitle = `Invalid Preference: ${invalidPreference}`;\n    toastMessage = \"Please Check Extension Preference.\";\n  }\n  showToast(Toast.Style.Failure, toastTitle, toastMessage);\n};\n\nexport default function Command() {\n  const [entries, setEntries] = useState<string[]>();\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    loadEntriesCache()\n      .then((entries) => {\n        console.log(\"loading entries\");\n        setEntries(entries);\n      })\n      .catch(errorHandler)\n      .then(refreshEntriesCache)\n      .then((entries) => {\n        console.log(\"updating entries\");\n        setIsLoading(false);\n        setEntries(entries);\n      });\n  }, []);\n\n  return (\n    <List isLoading={isLoading} searchBarPlaceholder=\"Type to Search in KeepassXC\" throttle={true}>\n      {entries?.map((entry, i) => (\n        <List.Item\n          key={i}\n          title={entry.split(\"/\")[entry.split(\"/\").length - 1]}\n          accessories={\n            entry.split(\"/\").length > 2\n              ? entry\n                  .split(\"/\")\n                  .slice(1, entry.split(\"/\").length - 1)\n                  .map((tag) => {\n                    return { tag: tag };\n                  })\n              : []\n          }\n          keywords={entry.split(\"/\").slice(1)}\n          actions={\n            <ActionPanel>\n              <Action\n                title=\"Paste Password\"\n                icon={Icon.BlankDocument}\n                onAction={() => {\n                  pastePassword(entry)\n                    .then(() => closeMainWindow())\n                    .catch(errorHandler);\n                }}\n              />\n              <Action\n                title=\"Paste Username\"\n                icon={Icon.BlankDocument}\n                shortcut={{ modifiers: [\"shift\"], key: \"enter\" }}\n                onAction={() => {\n                  pasteUsername(entry)\n                    .then(() => closeMainWindow())\n                    .catch(errorHandler);\n                }}\n              />\n              <Action\n                title=\"Paste TOTP\"\n                icon={Icon.BlankDocument}\n                shortcut={{ modifiers: [\"opt\"], key: \"enter\" }}\n                onAction={() => {\n                  pasteTOTP(entry)\n                    .then(() => closeMainWindow())\n                    .catch(errorHandler);\n                }}\n              />\n              <Action\n                title=\"Copy Password\"\n                icon={Icon.Clipboard}\n                shortcut={{ modifiers: [\"cmd\"], key: \"g\" }}\n                onAction={() => {\n                  copyPassword(entry)\n                    .then(() => closeMainWindow())\n                    .catch(errorHandler);\n                }}\n              />\n              <Action\n                title=\"Copy Username\"\n                icon={Icon.Clipboard}\n                shortcut={{ modifiers: [\"cmd\"], key: \"b\" }}\n                onAction={() => {\n                  copyUsername(entry)\n                    .then(() => closeMainWindow())\n                    .catch(errorHandler);\n                }}\n              />\n              <Action\n                title=\"Copy TOTP\"\n                icon={Icon.Clipboard}\n                shortcut={{ modifiers: [\"cmd\"], key: \"t\" }}\n                onAction={() => {\n                  copyTOTP(entry)\n                    .then(() => closeMainWindow())\n                    .catch(errorHandler);\n                }}\n              />\n              <Action\n                title=\"Open URL\"\n                icon={Icon.Link}\n                shortcut={{ modifiers: [\"shift\", \"cmd\"], key: \"u\" }}\n                onAction={() => {\n                  getURL(entry)\n                    .then((url) => {\n                      if (url != \"\" && url != undefined) {\n                        open(url);\n                      } else {\n                        showToast(Toast.Style.Failure, \"URL Not Set\");\n                      }\n                    })\n                    .catch(errorHandler);\n                }}\n              />\n            </ActionPanel>\n          }\n        />\n      ))}\n    </List>\n  );\n}\n", "import { Clipboard, getPreferenceValues, showHUD, LocalStorage } from \"@raycast/api\";\nimport path from \"path\";\nimport child_process from \"child_process\";\nconst spawn = child_process.spawn;\n\ninterface Preference {\n  keepassxcRootPath: {\n    name: string;\n    path: string;\n    bundleId: string;\n  };\n  database: string;\n  dbPassword: string;\n  keyFile: string;\n}\n\nconst getKeepassXCVersion = () =>\n  new Promise<number>((resolve, reject) => {\n    const cli = spawn(`${keepassxcCli}`, [\"--version\"]);\n    cli.stderr.on(\"data\", cliStdOnErr(reject));\n    const chuncks: Buffer[] = [];\n    cli.stdout.on(\"data\", (chunck) => {\n      chuncks.push(chunck);\n    });\n    cli.stdout.on(\"end\", () => {\n      const version = parseFloat(chuncks.join(\"\").toString().split(\".\").slice(0, 2).join(\".\"));\n      console.log(\"current keepassxc version:\", version);\n      // remove \\n in the end\n      resolve(version);\n    });\n  });\n\nconst preferences: Preference = getPreferenceValues();\n// keepass database file path\nconst database = preferences.database;\n// password for keepass database\nconst dbPassword = preferences.dbPassword;\n// Key File for keepass database\nconst keyFile = preferences.keyFile;\n// keepass-cli executable path\nconst keepassxcCli = path.join(preferences.keepassxcRootPath.path, \"Contents/MacOS/keepassxc-cli\");\n// search entry command, since version 2.7 command 'locate' has been renamed to 'search'\nconst getSearchEntryCommand = async () => ((await getKeepassXCVersion()) >= 2.7 ? \"search\" : \"locate\");\nconst keyFileOption = keyFile != \"\" && keyFile != null ? [\"-k\", `${keyFile}`] : [];\n// cli options\nconst cliOptions = [...keyFileOption, \"-q\"];\nconst entryFilter = (entryStr: string) => {\n  return entryStr\n    .split(\"\\n\")\n    .map((f: string) => f.trim())\n    .filter(\n      (f: string) =>\n        f !== undefined &&\n        !f.startsWith(\"/\u56DE\u6536\u7AD9\") &&\n        !f.startsWith(\"/Trash\") &&\n        !f.startsWith(\"/Deprecated\") &&\n        f.length > 0\n    )\n    .sort();\n};\n\n/**\n * execute command with keepassxc-cli\n * @param command The command to run.\n * @param options List of string arguments.\n * @returns\n */\nconst execKeepassXCCli = async (options: string[]) =>\n  new Promise<string>((resolve, reject) => {\n    const cli = spawn(`${keepassxcCli}`, options);\n    cli.stdin.write(`${dbPassword}\\n`);\n    cli.stdin.end();\n    cli.on(\"error\", reject);\n    cli.stderr.on(\"data\", cliStdOnErr(reject));\n    const chuncks: Buffer[] = [];\n    cli.stdout.on(\"data\", (chunck) => {\n      chuncks.push(chunck);\n    });\n    // finish when all chunck has been collected\n    cli.stdout.on(\"end\", () => {\n      const result = chuncks.join(\"\").toString();\n      // remove \\n in the end\n      resolve(result.slice(0, result.length - 1));\n    });\n  });\n\n/**\n * load entries from cache\n * @returns all entries in LocalStorage\n */\nconst loadEntriesCache = async () => {\n  return LocalStorage.getItem(\"entries\").then((entries) => {\n    if (entries == undefined) {\n      return [];\n    } else {\n      return entryFilter(entries.toString());\n    }\n  });\n};\n\n/**\n * refresh entries cache\n * @returns all entries in database file\n */\nconst refreshEntriesCache = async () =>\n  getSearchEntryCommand()\n    .then((cmd) => {\n      const search_keywrod = cmd === \"search\" ? \"\" : \"/\";\n      return execKeepassXCCli([cmd, ...keyFileOption, \"-q\", `${database}`, search_keywrod]);\n    })\n    .then((entries) => {\n      LocalStorage.setItem(\"entries\", entries);\n      return entryFilter(entries);\n    });\n\nconst cliStdOnErr = (reject: (reason: Error) => void) => (data: Buffer) => {\n  if (\n    data.toString().indexOf(\"Enter password to unlock\") != -1 ||\n    data.toString().indexOf(\"Maximum depth of replacement has been reached\") != -1 ||\n    data.toString().trim().length == 0\n  ) {\n    return;\n  }\n  reject(new Error(data.toString()));\n};\n\nconst getPassword = (entry: string) =>\n  execKeepassXCCli([\"show\", ...cliOptions, \"-a\", \"Password\", `${database}`, `${entry}`]);\n\nconst getUsername = (entry: string) =>\n  execKeepassXCCli([\"show\", ...cliOptions, \"-a\", \"Username\", `${database}`, `${entry}`]);\n\nconst pastePassword = async (entry: string) => {\n  console.log(\"paste password of entry:\", entry);\n  return getPassword(entry).then((password) => {\n    return Clipboard.paste(password).then(() => password);\n  });\n};\n\nconst copyPassword = async (entry: string) =>\n  getPassword(entry).then((password) => {\n    showHUD(\"Password has been Copied to Clipboard\");\n    return Clipboard.copy(password, { concealed: true }).then(() => password);\n  });\n\nconst pasteUsername = async (entry: string) => {\n  console.log(\"paste username of entry:\", entry);\n  return getUsername(entry).then((username) => {\n    return Clipboard.paste(username).then(() => username);\n  });\n};\n\nconst copyUsername = async (entry: string) =>\n  getUsername(entry).then((username) => {\n    showHUD(\"Username has been Copied to Clipboard\");\n    return Clipboard.copy(username).then(() => username);\n  });\n\nconst pasteTOTP = async (entry: string) => {\n  console.log(\"paste totp of entry:\", entry);\n  return getTOTP(entry).then((otp) => {\n    return Clipboard.paste(otp).then(() => otp);\n  });\n};\n\nconst copyTOTP = async (entry: string) =>\n  getTOTP(entry).then((otp) => {\n    showHUD(\"TOTP has been Copied to Clipboard\");\n    return Clipboard.copy(otp, { concealed: true }).then(() => otp);\n  });\n\nconst getTOTP = (entry: string) => execKeepassXCCli([\"show\", ...cliOptions, \"-t\", `${database}`, `${entry}`]);\n\nconst getURL = (entry: string) => execKeepassXCCli([\"show\", ...cliOptions, \"-a\", \"URL\", `${database}`, `${entry}`]);\n\nexport {\n  loadEntriesCache,\n  refreshEntriesCache,\n  pastePassword,\n  pasteUsername,\n  pasteTOTP,\n  getPassword,\n  getURL,\n  copyPassword,\n  copyUsername,\n  copyTOTP,\n};\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "Command", "__toCommonJS", "import_api", "import_api", "import_path", "import_child_process", "spawn", "child_process", "getKeepassXCVersion", "resolve", "reject", "cli", "keepassxcCli", "cliStdOnErr", "chuncks", "chunck", "version", "preferences", "database", "dbPassword", "keyFile", "path", "getSearchEntryCommand", "keyFileOption", "cliOptions", "entryFilter", "entryStr", "f", "execKeepassXCCli", "options", "result", "loadEntriesCache", "entries", "refreshEntriesCache", "cmd", "search_keywrod", "data", "getPassword", "entry", "getUsername", "pastePassword", "password", "copyPassword", "pasteUsername", "username", "copyUsername", "pasteTOTP", "getTOTP", "otp", "copyTOTP", "getURL", "import_react", "import_jsx_runtime", "errorHandler", "invalidPreference", "toastTitle", "toastMessage", "Command", "entries", "setEntries", "isLoading", "setIsLoading", "loadEntriesCache", "refreshEntriesCache", "entry", "i", "tag", "pastePassword", "pasteUsername", "pasteTOTP", "copyPassword", "copyUsername", "copyTOTP", "getURL", "url"]
}
