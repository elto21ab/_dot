<html>

<head>
    <style>
        .grid-container {
            display: grid;
            height: 150px;
            width: 150px;
            background-color: #d9d9d9;
            border: 1px solid #b5b6b7;
            border-radius: 10px;
            -webkit-background-clip: padding-box;
            background-clip: padding-box;
            grid-template-columns: 1fr 1fr;
            grid-template-rows: 1fr 1fr;
            grid-gap: 0px 0px;
            grid-template-areas: "TopLeft TopRight""BottomLeft BottomRight";
        }

        .highlighted {
            opacity: .6;
            transition: 0.3s ease-in-out;
        }

        .TopLeftTopLeft:hover,
        .TopRightTopRight:hover,
        .BottomLeftBottomLeft:hover,
        .BottomRightBottomRight:hover {
            background: #d9d9d9;
            transition: 0.2s ease-in-out;
        }

        .TopLeft {
            display: grid;
            grid-area: TopLeft;
            grid-template-columns: 1fr 1fr;
            grid-template-rows: 1fr 1fr;
            grid-gap: 1px 1px;
            grid-template-areas:
                "TopLeftTopLeft TopLeftTopRight""TopLeftBottomLeft TopLeftBottomRight";
        }

        .TopLeftTopLeft {
            grid-area: TopLeftTopLeft;
            background-color: #FFFFFF;
            border-top-left-radius: 10px;
            -webkit-background-clip: padding-box;
            background-clip: padding-box;
        }

        .TopLeftBottomLeft {
            grid-area: TopLeftBottomLeft;
            background: #FFFFFF;
        }


        .TopLeftTopRight {
            grid-area: TopLeftTopRight;
            background: #FFFFFF;
        }

        .TopLeftBottomRight {
            grid-area: TopLeftBottomRight;
            background: #FFFFFF;
        }

        .TopRight {
            display: grid;
            grid-area: TopRight;
            grid-template-columns: 1fr 1fr;
            grid-template-rows: 1fr 1fr;
            grid-gap: 1px 1px;
            grid-template-areas: "TopRightTopLeft TopRightTopRight""TopRightBottomLeft TopRightBottomRight";
        }

        .TopRightTopLeft {
            grid-area: TopRightTopLeft;
            background: #FFFFFF;
        }

        .TopRightTopRight {
            grid-area: TopRightTopRight;
            background: #FFFFFF;
            border-top-right-radius: 10px;
            -webkit-background-clip: padding-box;
            background-clip: padding-box;
        }

        .TopRightBottomLeft {
            grid-area: TopRightBottomLeft;
            background: #FFFFFF;
        }

        .TopRightBottomRight {
            grid-area: TopRightBottomRight;
            background: #FFFFFF;
        }

        .BottomLeft {
            display: grid;
            grid-area: BottomLeft;
            grid-template-columns: 1fr 1fr;
            grid-template-rows: 1fr 1fr;
            grid-gap: 1px 1px;
            grid-template-areas: "BottomLeftTopLeft BottomLeftTopRight""BottomLeftBottomLeft BottomLeftBottomRight";
        }

        .BottomLeftTopLeft {
            grid-area: BottomLeftTopLeft;
            background: #FFFFFF;
        }

        .BottomLeftTopRight {
            grid-area: BottomLeftTopRight;
            background: #FFFFFF;
        }

        .BottomLeftBottomLeft {
            grid-area: BottomLeftBottomLeft;
            background: #FFFFFF;
            border-bottom-left-radius: 10px;
            -webkit-background-clip: padding-box;
            background-clip: padding-box;
        }

        .BottomLeftBottomRight {
            grid-area: BottomLeftBottomRight;
            background: #FFFFFF;
        }

        .BottomRight {
            display: grid;
            grid-area: BottomRight;
            grid-template-columns: 1fr 1fr;
            grid-template-rows: 1fr 1fr;
            grid-gap: 1px 1px;
            grid-template-areas: "BottomRightTopLeft BottomRightTopRight""BottomRightBottomLeft BottomRightBottomRight";
        }

        .BottomRightTopLeft {
            grid-area: BottomRightTopLeft;
            background: #FFFFFF;
        }

        .BottomRightTopRight {
            grid-area: BottomRightTopRight;
            background: #FFFFFF;
        }

        .BottomRightBottomLeft {
            grid-area: BottomRightBottomLeft;
            background: #FFFFFF;
        }

        .BottomRightBottomRight {
            grid-area: BottomRightBottomRight;
            background: #FFFFFF;
            border-bottom-right-radius: 10px;
            -webkit-background-clip: padding-box;
            background-clip: padding-box;
        }
    </style>

    <script>
        window.currentlyHighlighted = [];

        function addHighlight(classNames) {
            for (var i = 0; i < classNames.length; i++) {
                window.currentlyHighlighted.push(classNames[i]);
                document.getElementsByClassName(classNames[i]).item(0).classList.add('highlighted');
            }

        }

        function uniq(a) {
            var prims = {
                    "boolean": {},
                    "number": {},
                    "string": {}
                },
                objs = [];

            return a.filter(function(item) {
                var type = typeof item;
                if (type in prims)
                    return prims[type].hasOwnProperty(item) ? false : (prims[type][item] = true);
                else
                    return objs.indexOf(item) >= 0 ? false : objs.push(item);
            });
        }

        function removeHighlight(classNames) {

            for (var i = 0; i < classNames.length; i++) {
                window.currentlyHighlighted = window.currentlyHighlighted.filter(e => e !== classNames[i]);
                document.getElementsByClassName(classNames[i]).item(0).classList.remove('highlighted');
            }

        }


        function performAction() {
            console.log(uniq(window.currentlyHighlighted));
            var trigger = '';
            if (window.currentlyHighlighted.indexOf('TopLeft') !== -1 &&
                window.currentlyHighlighted.indexOf('TopRight') !== -1 &&
                window.currentlyHighlighted.indexOf('BottomLeft') !== -1 &&
                window.currentlyHighlighted.indexOf('BottomRight') !== -1) {
                trigger = 'maximize';
            } else if (window.currentlyHighlighted.indexOf('TopLeft') !== -1 &&
                window.currentlyHighlighted.indexOf('TopRight') !== -1) {
                trigger = 'tophalf';
            } else if (window.currentlyHighlighted.indexOf('BottomLeft') !== -1 &&
                window.currentlyHighlighted.indexOf('BottomRight') !== -1) {
                trigger = 'bottomhalf';
            } else if (window.currentlyHighlighted.indexOf('TopLeft') !== -1 &&
                window.currentlyHighlighted.indexOf('BottomLeft') !== -1) {
                trigger = 'lefthalf';
            } else if (window.currentlyHighlighted.indexOf('TopRight') !== -1 &&
                window.currentlyHighlighted.indexOf('BottomRight') !== -1) {
                trigger = 'righthalf';
            } else if (window.currentlyHighlighted.indexOf('TopRight') !== -1) {
                trigger = 'topright';

            } else if (window.currentlyHighlighted.indexOf('TopLeft') !== -1) {
                trigger = 'topleft';

            } else if (window.currentlyHighlighted.indexOf('BottomLeft') !== -1) {
                trigger = 'bottomleft';

            } else if (window.currentlyHighlighted.indexOf('BottomRight') !== -1) {
                trigger = 'bottomright';

            }

            console.log('trigger', trigger);
            window.BTT.callHandler('trigger_named', {
                trigger_name: trigger,
                closeFloatingHTMLMenu: 1
            })
        }
    </script>

</head>

<body>
    <div class="grid-container" onclick="performAction()">
        <div class="TopLeft" onmouseover="addHighlight(['TopLeft'])" onmouseout="removeHighlight(['TopLeft']);">
            <div class="area-overlap TopLeftTopLeft">
            </div>
            <div class="TopLeftBottomLeft" onmouseover="addHighlight(['BottomLeft', 'TopLeft'])" onmouseout="removeHighlight(['BottomLeft', 'TopLeft'])">
            </div>
            <div class="TopLeftTopRight Top" onmouseover="addHighlight(['TopRight', 'TopLeft']);" onmouseout="removeHighlight(['TopRight', 'TopLeft'])">
            </div>
            <div class="TopLeftBottomRight" onmouseover="addHighlight(['TopRight', 'BottomRight', 'BottomLeft', 'TopLeft'])" onmouseout="removeHighlight(['TopRight', 'BottomRight', 'BottomLeft', 'TopLeft'])">
            </div>
        </div>
        <div class="TopRight" onmouseover="addHighlight(['TopRight'])" onmouseout="removeHighlight(['TopRight'])">
            <div class="area-overlap TopRightTopLeft" onmouseover="addHighlight(['TopRight', 'TopLeft'])" onmouseout="removeHighlight(['TopRight', 'TopLeft'])">
            </div>
            <div class="TopRightTopRight">
            </div>
            <div class="TopRightBottomLeft" onmouseover="addHighlight(['TopRight', 'BottomRight', 'BottomLeft', 'TopLeft'])" onmouseout="removeHighlight(['TopRight', 'BottomRight', 'BottomLeft', 'TopLeft'])">
            </div>
            <div class="TopRightBottomRight" onmouseover="addHighlight(['TopRight', 'BottomRight'])" onmouseout="removeHighlight(['TopRight', 'BottomRight'])">
            </div>
        </div>

        <!--
                       <div class="BottomLeft" onmouseover="addHighlight(['BottomLeft'])" onmouseout="removeHighlight(['BottomLeft'])">
            <div class="area-overlap BottomLeftTopLeft" onmouseover="addHighlight(['BottomLeft', 'TopLeft'])" onmouseout="removeHighlight(['BottomLeft', 'TopLeft'])">
            </div>
        </div>
                -->

        <div class="BottomLeft" onmouseover="addHighlight(['BottomLeft'])" onmouseout="removeHighlight(['BottomLeft'])">

            <div class="area-overlap BottomLeftTopLeft" onmouseover="addHighlight(['BottomLeft', 'TopLeft'])" onmouseout="removeHighlight(['BottomLeft', 'TopLeft'])">
            </div>
            <div class="BottomLeftTopRight" onmouseover="addHighlight(['TopRight', 'BottomRight', 'BottomLeft', 'TopLeft'])" onmouseout="removeHighlight(['TopRight', 'BottomRight', 'BottomLeft', 'TopLeft'])">
            </div>
            <div class="BottomLeftBottomLeft">
            </div>
            <div class="BottomLeftBottomRight" onmouseover="addHighlight(['BottomLeft', 'BottomRight'])" onmouseout="removeHighlight(['BottomLeft', 'BottomRight'])">
            </div>
        </div>
        <div class="BottomRight" onmouseover="addHighlight(['BottomRight'])" onmouseout="removeHighlight(['BottomRight'])">
            <div class="area-overlap BottomRightTopLeft" onmouseover="addHighlight(['TopRight', 'BottomRight', 'BottomLeft', 'TopLeft'])" onmouseout="removeHighlight(['TopRight', 'BottomRight', 'BottomLeft', 'TopLeft'])">
            </div>
            <div class="BottomRightTopRight" onmouseover="addHighlight(['BottomRight', 'TopRight'])" onmouseout="removeHighlight(['BottomRight', 'TopRight'])">
            </div>
            <div class="BottomRightBottomLeft" onmouseover="addHighlight(['BottomLeft', 'BottomRight'])" onmouseout="removeHighlight(['BottomLeft', 'BottomRight'])">
            </div>
            <div class="BottomRightBottomRight">
            </div>
        </div>

    </div>
</body>


</html>